$(document).ready(function(){
        if ("WebSocket" in window) {
          ws = new WebSocket("ws://" + document.domain + ":5000/ws");		  
          ws.onmessage = function (msg) {
            var message = JSON.parse(msg.data);
            var name = message.result.name;
            if (message.result.result == "deleteUserData succeed")
              $("tr#"+name).remove();
			else if(message.request=='getLoginedUserName')
			{
				sessionStorage.loginedUserName=message.result;
			}else if(message.request=='loadUserFile')
			{
			  switch (filetype){
				case 'regulation':
					sessionStorage.regulationSave=eval('(' + message.result + ')');
					window.location = "index";
					break;			
				case 'genecircuit':
					sessionStorage.gene_circuit=message.result;
					window.location = "genecircuit";
					break;
				case 'plasmid':
					sessionStorage.genecircuitSave=eval('(' + message.result + ')');
					window.location = "plasmid";
					break;
				case 'protocol':
					sessionStorage.genecircuitSave=eval('(' + message.result + ')');
					window.location = "protocol";
					break;
			  }		 
			}
			else if(message.request == "setFileShared")
			{				
				$('#mymodal').find('p').text(message.result);
				$('#mymodal').modal('show');
			}else if(message.request=="unsharedAFile")
			{
				location.reload(); 
			}else if(message.request=='isExtractCodeRight'){
				if(message.result==false){
					alert('Wrong extract code!');
					return;
				}else{
					filetype=sessionStorage.filetype;
					filename=sessionStorage.filename;
					switch (filetype){
										case 'regulation':
					sessionStorage.regulationSave=eval('(' + message.result + ')');
					window.location = "index";
					break;			
				case 'genecircuit':
					sessionStorage.gene_circuit=eval('(' + message.result + ')');
					window.location = "genecircuit";
					break;
				case 'plasmid':
					sessionStorage.genecircuitSave=eval('(' + message.result + ')');
					window.location = "plasmid";
					break;
				case 'protocol':
					sessionStorage.genecircuitSave=eval('(' + message.result + ')');
					window.location = "protocol";
					break;
			  }		 
				}
			}
          };
        };		
        // Bind send button to websocket
        $("button.delete").live("click", function() {
          filename = this.getAttribute("id");		  
          ws.send(JSON.stringify({'request': 'deleteUserData', 'name': filename}));
        });
		$("button.shared").live("click", function() {
			filename = this.getAttribute("id");
		    filetype = $(this).find("p").text();	
			ws.send(JSON.stringify({'request': 'setFileShared', 'filename': filename,'filetype':filetype}));			
		});
		$("button.unshared").live("click", function() {
			filename = this.getAttribute("id");
		    filetype = $(this).find("p").text();	
			ws.send(JSON.stringify({'request': 'unsharedAFile', 'filename': filename,'filetype':filetype}));
		});
		$("button.open").live("click", function() {
		  filename = this.getAttribute("id");
		  filetype = $(this).find("p").text();
		  ws.send(JSON.stringify({'request': 'loadUserFile', 'fileName': filename,'fileType':filetype}));
        });
		$("button.openpart").live("click", function() {		  
		  ws.send(JSON.stringify({'request': 'loadUserFile', 'fileName': filename,'fileType':filetype}));
        });
		$("button.openshared").live("click", function() {
		  filename = this.getAttribute("id");
		  filetype = $(this).find("p").text();
		  sessionStorage.filename=filename;
		  sessionStorage.filetype=filetype;
		  if(this.getAttribute('name')==sessionStorage.loginedUserName)
		  {
			  ws.send(JSON.stringify({'request': 'loadUserFile', 'fileName': filename,'fileType':filetype}));			
		  }else{
		  var str=prompt("Please input the file extract code:","");
			  if(str==null||str=='')
			  {
				  return;
			  }
			  ws.send(JSON.stringify({'request': 'isExtractCodeRight', 'filename': filename,'filetype':filetype,'userName':this.getAttribute("name"),'code':str}));	
		  }
        });
		ws.onopen=function(){
			ws.send(JSON.stringify({'request': 'getLoginedUserName'}));
		};
		
        // Cleanly close websocket when unload window
        window.onbeforeunload = function() {
          ws.onclose = function () {}; // disable onclose handler first
          ws.close();
        };
      });